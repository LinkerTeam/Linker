<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
 
	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	<!-- css파일 읽어오기 -->
	<resources mapping="/css/**" location="/resources/css/" />
	<!-- <resources mapping="/images/**" location="/resources/images/" /> <resources 
		mapping="/js/**" location="/resources/js/" /> <resources mapping="/resources/**" 
		location="/resources/" /> -->
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<beans:bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>

	<context:component-scan base-package="com.linker.controller" />
	<context:component-scan base-package="com.linker.websocket" />

	<beans:bean id="loginInterceptor" class="com.linker.interceptor.LoginInterceptor"></beans:bean>
	<beans:bean id="authInterceptor" class="com.linker.interceptor.AuthInterceptor"></beans:bean>

	<interceptors>

		<interceptor>
			<!-- URL 을 user/loginPost를 실행하기전에 loginInterceptor를 먼저 실행한다음 들어가시오 컨트롤러 
				실행후에도 인터셉터로 다시 들어간다 전후처리 -->
			<mapping path="/user/loginPost" />
			<beans:ref bean="loginInterceptor" />  <!-- 위 URI에을 실행하면 loginInterceptor를 사용한다는 뜻 -->
		</interceptor>


		<!-- mapping된곳에서 URL들을 들어갈때 authInterceptor에서 세션을 검사함 세션의 유무에 따라 없을경우 로그인 
			페이지로 있을경우 페이지로 이동 -->
		<interceptor>
			<mapping path="/user/userModify" />
			<mapping path="/user/connect" />
			<mapping path="/user/passwordchange"/>
			<mapping path="/user/secessionUser"/>
			<mapping path="/user/googleSescession"/>
			<mapping path="/main/**"/>
			<mapping path="/board/**"/>
			<mapping path="/main"/>
			<beans:ref bean="authInterceptor" />
		</interceptor>

	</interceptors>

	<!-- 파일업로드시 필요한 객체 -->
	<beans:bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="10485760"></beans:property>
	</beans:bean>

	<!-- 파일경로를 지정해줌 객체 -->
	<beans:bean id="uploadPath" class="java.lang.String">
		<beans:constructor-arg value="C:\\zzz\\upload">
		</beans:constructor-arg>
	</beans:bean>

	<!-- google Class Bean설정 추가 -->
	<!-- 클라이언트ID와 보안비밀 세팅 -->
  <!--  <beans:bean id="googleConnectionFactory"
		class="org.springframework.social.google.connect.GoogleConnectionFactory">
		<beans:constructor-arg
			value="434412171169-cd02baoouihjfd0k9a2d5erdapmu1obu.apps.googleusercontent.com"/>
		<beans:constructor-arg value="g8HKKWylA4HhQNr-C47DFhzS" />
	</beans:bean>

	승인된 자바스크립트 원본과 승인된 리디렉션 URI
	<beans:bean id="googleOAuth2Parameters"
		class="org.springframework.social.oauth2.OAuth2Parameters">
		<beans:property name="scope"
			value="https://www.googleapis.com/auth/plus.login" />
		<beans:property name="redirectUri"
			value="http://localhost:9090/user/oauth2callback" />
	 </beans:bean>    -->
	 
	 <!-- NaverLoginBO Class에 대한 Bean설정 추가 -->
<!-- <beans:bean id="naverLoginBO" class="com.linker.test.NaverLoginBO" /> -->
	 
	 
</beans:beans>
